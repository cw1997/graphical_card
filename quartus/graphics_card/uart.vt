`timescale 1ns/1ns

module uart_tb (
);

parameter one_second = 1_000_000_000;

parameter clk_hz = 50_000_000;
parameter uart_bps = 115_200;

reg clk, rst_n;

reg rxd;
wire[6:0] gram_write_data;
wire[11:0] gram_write_address;
wire gram_write_enable;

initial begin
    clk = 0;

    rxd = 1;

    #1 rst_n = 0;
    #1 rst_n = 1;

end

always #(one_second / clk_hz / 2) clk = ~clk;
always begin
    #(one_second / uart_bps * 3)
    #(one_second / uart_bps) rxd = 0; // sync bit
    #(one_second / uart_bps) rxd = 1; // 1
    #(one_second / uart_bps) rxd = 1; // 2
    #(one_second / uart_bps) rxd = 0; // 3
    #(one_second / uart_bps) rxd = 0; // 4
    #(one_second / uart_bps) rxd = 0; // 5
    #(one_second / uart_bps) rxd = 1; // 6
    #(one_second / uart_bps) rxd = 1; // 7
    #(one_second / uart_bps) rxd = 0; // 8
    #(one_second / uart_bps) rxd = 1; // stop bit

    #(one_second / uart_bps * 3)
    #(one_second / uart_bps) rxd = 0; // sync bit
    #(one_second / uart_bps) rxd = 0; // 1
    #(one_second / uart_bps) rxd = 0; // 2
    #(one_second / uart_bps) rxd = 0; // 3
    #(one_second / uart_bps) rxd = 0; // 4
    #(one_second / uart_bps) rxd = 0; // 5
    #(one_second / uart_bps) rxd = 0; // 6
    #(one_second / uart_bps) rxd = 0; // 7
    #(one_second / uart_bps) rxd = 0; // 8
    #(one_second / uart_bps) rxd = 1; // stop bit

    #(one_second / uart_bps * 3)
    #(one_second / uart_bps) rxd = 0; // sync bit
    #(one_second / uart_bps) rxd = 0; // 1
    #(one_second / uart_bps) rxd = 0; // 2
    #(one_second / uart_bps) rxd = 0; // 3
    #(one_second / uart_bps) rxd = 0; // 4
    #(one_second / uart_bps) rxd = 0; // 5
    #(one_second / uart_bps) rxd = 0; // 6
    #(one_second / uart_bps) rxd = 0; // 7
    #(one_second / uart_bps) rxd = 0; // 8
    #(one_second / uart_bps) rxd = 1; // stop bit
end

uart uart_inst (
    .rxd ( rxd ), 
    
    .gram_write_data ( gram_write_data ),
    .gram_write_address ( gram_write_address ),
    .gram_write_enable ( gram_write_enable ),
    
    .clk ( clk ), 
    .rst_n ( rst_n )
);
    
endmodule